{"version":3,"sources":["utilities/checkCDN.js","assets/sortingAlgoList.js","components/Dots.js","components/SortingAlgorithims.js","components/index.js"],"names":["checkCDNexist","anime","React","ReactDOM","console","log","error","alert","sortingAlgoList","id","name","swapWithNext","inputArray","indexLoc","firstItem","bubbleSort","randomArray","returnArraySteps","finishPassing","i","length","push","countingSort","max","Math","apply","countArray","Array","fill","sortedArray","value","returnChildren","node","swapPositon","pos1","pos2","tempVariable","heapify","nodeChildren","lastLoop","undefined","heapSort","returnArray","lastElement","pop","concat","reverse","insert","number","splice","insertionSort","insertionValue","radixMagnitudeValue","magnitude","strValue","magValue","parseInt","isNaN","radixSort","index","magVal","flat","nums","min","selectionSort","mergeSortSteps","initialArrayLengthMergeSort","mergeSortMerge","firstHalf","secondHalf","mergedArray","appendValue","shift","mergeSort","midpoint","round","mergeSortHandler","quickSortSteps","initialArrayLengthQuickSort","mergeArrays","leftArray","partitionValue","rightArray","getHalves","leftHalf","rightHalf","quickSort","halves","quickSortHandler","refreshPeriod","Dot","opacity","props","Component","Dots","state","sortingSteps","currentArray","interval","setInterval","setState","dots","map","element","processSort","algoName","arraySteps","Algorithim","Header","SortingAlgorithims","r","floor","random","indexOf","algorithimList","algo","render","document","getElementById"],"mappings":"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","file":"components.2beec63a.js","sourceRoot":"..","sourcesContent":["{/* <script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script> */}\r\n{/* <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script> */}\r\n{/* <script crossorigin src=\"https://cdn.jsdelivr.net/npm/animejs@3.2.0/lib/anime.min.js\"></script> */}\r\n\r\nfunction checkCDNexist(){\r\n    try {\r\n        anime = anime\r\n        React = React\r\n        ReactDOM = ReactDOM\r\n        console.log(\"All CDNs imported\")\r\n    } catch (error) {\r\n        alert(\"One or more CDNs could not be imported, issues with page may occur\")\r\n    }\r\n}\r\n\r\nexport default checkCDNexist","const sortingAlgoList = [\r\n    {\r\n        id:\"bubbleSort\",\r\n        name:\"Bubble Sort\",\r\n    },\r\n    {\r\n        id:\"heapSort\",\r\n        name:\"Heap Sort\",\r\n    },\r\n    {\r\n        id:\"insertionSort\",\r\n        name:\"Insertion Sort\",\r\n    },\r\n    {\r\n        id:\"countingSort\",\r\n        name:\"Counting Sort\",\r\n    },\r\n    {\r\n        id:\"radixSort\",\r\n        name:\"Radix Sort\",\r\n    },\r\n    {\r\n        id:\"selectionSort\",\r\n        name:\"Selection Sort\",\r\n    },\r\n    {\r\n        id:\"mergeSort\",\r\n        name:\"Merge Sort\",\r\n    },\r\n    {\r\n        id:\"quickSort\",\r\n        name:\"Quick Sort\",\r\n    },\r\n]\r\n\r\n//for bubbleSort\r\nfunction swapWithNext(inputArray,indexLoc){\r\n    let firstItem = inputArray[indexLoc]\r\n    inputArray[indexLoc] = inputArray[indexLoc+1]\r\n    inputArray[indexLoc+1] = firstItem\r\n    return inputArray\r\n}\r\n\r\nfunction bubbleSort(randomArray) {\r\n    let returnArraySteps = []\r\n    do{\r\n        var finishPassing = true\r\n        for(var i = 0;i < randomArray.length;i++){\r\n            if(randomArray[i] > randomArray[i+1]){\r\n                randomArray = [...swapWithNext(randomArray,i)]\r\n                returnArraySteps.push(randomArray)\r\n                finishPassing = false\r\n            }\r\n        }\r\n    }while(finishPassing == false)\r\n\r\n    return returnArraySteps\r\n}\r\n\r\nfunction countingSort(randomArray){\r\n    let returnArraySteps = []\r\n    //get the max value\r\n    const max = Math.max.apply(null,randomArray)\r\n    var countArray = new Array(max+1).fill(0)\r\n\r\n    //fill out counts\r\n    for(var i = 0;i<randomArray.length;i++){\r\n        countArray[randomArray[i]] = countArray[randomArray[i]] + 1\r\n    }\r\n\r\n    //create cumulative counts\r\n    for(var i = 0;i<max;i++){\r\n        countArray[i+1] = countArray[i+1] + countArray[i]\r\n    }\r\n\r\n    var sortedArray = Array(randomArray.length).fill(0)\r\n    //place in sorted array and decrement\r\n    for(var i = randomArray.length - 1;i > -1;i--){\r\n        var value = randomArray[i]\r\n        sortedArray[countArray[value]-1] = value\r\n        countArray[value] = countArray[value] -1\r\n        returnArraySteps.push([...sortedArray])\r\n    }\r\n\r\n    return returnArraySteps\r\n}\r\n\r\n//for heapSort\r\nconst returnChildren = (node) => {return [node*2+1,node*2+2]}\r\n\r\nfunction swapPositon(inputArray,pos1,pos2){\r\n    const tempVariable = inputArray[pos1]\r\n    inputArray[pos1] = inputArray[pos2]\r\n    inputArray[pos2] = tempVariable\r\n    return inputArray\r\n}\r\n\r\nfunction heapify(randomArray,node){\r\n    const nodeChildren = returnChildren(node)\r\n    do{\r\n        var lastLoop = true\r\n        //if the node is smaller than the children nodes, swap\r\n        if(randomArray[node]<randomArray[nodeChildren[1]]){\r\n            //try the right child\r\n            randomArray = swapPositon(randomArray,node,nodeChildren[1])\r\n            lastLoop = false\r\n        }\r\n\r\n        if(randomArray[node]<randomArray[nodeChildren[0]]){\r\n            //try the left child\r\n            randomArray = swapPositon(randomArray,node,nodeChildren[0])\r\n            lastLoop = false\r\n        }\r\n\r\n        //call heapify on the childs\r\n        if(randomArray[nodeChildren[0]]!=undefined){\r\n            randomArray = heapify(randomArray,nodeChildren[0])\r\n        }\r\n        if(randomArray[nodeChildren[1]]!=undefined){\r\n            randomArray = heapify(randomArray,nodeChildren[1])\r\n        }\r\n    }while(lastLoop==false)\r\n    return randomArray\r\n}\r\n\r\nfunction heapSort(randomArray){\r\n    var sortedArray = []\r\n    var returnArray = []\r\n    while(randomArray!=undefined&&randomArray.length!=0){\r\n        randomArray = heapify(randomArray,0)\r\n\r\n        //heap is built, now swap the first and last element\r\n        randomArray = swapPositon(randomArray,0,randomArray.length-1)\r\n        //remove the last element as it is the max\r\n        var lastElement = randomArray.pop()\r\n        sortedArray.push(lastElement)\r\n        returnArray.push([...randomArray.concat(sortedArray).reverse()])\r\n    }\r\n    //reverse the array\r\n    return returnArray\r\n}\r\n\r\n//for insertionSort\r\nfunction insert(inputArray,number){\r\n    //everything to the left should be sorted\r\n    for (var i = 0; i < inputArray.length;i++){\r\n        if(number <= inputArray[i]){\r\n            inputArray.splice(i,0,number)\r\n            return inputArray\r\n        }\r\n    }\r\n}\r\n\r\nfunction insertionSort(randomArray) {\r\n    let returnArraySteps = []\r\n    for(var i = 1;i < randomArray.length;i++){\r\n        if(randomArray[i-1] > randomArray[i]){\r\n            var insertionValue = randomArray.splice(i,1)[0]\r\n            randomArray = [...insert(randomArray,insertionValue)]\r\n            returnArraySteps.push(randomArray)\r\n        }\r\n    }\r\n    return returnArraySteps\r\n}\r\n\r\n//for radixSort\r\nconst radixMagnitudeValue = (value,magnitude)=>{\r\n    let strValue = \"\"+value\r\n    let magValue = parseInt(strValue[strValue.length - magnitude - 1])\r\n    if(isNaN(magValue)){\r\n        return 0\r\n    }else{\r\n        return magValue\r\n    }\r\n}\r\n\r\nfunction radixSort(randomArray){\r\n    let returnArraySteps = []\r\n    for(var magnitude = 0;10**magnitude <= Math.max.apply(null,randomArray);magnitude++){\r\n        let sortedArray = Array(10).fill([])\r\n        for(var index=0;index<randomArray.length;index++){\r\n            let value = randomArray[index]\r\n            let magVal = radixMagnitudeValue(value,magnitude)\r\n            sortedArray[magVal] = sortedArray[magVal].concat([value])\r\n            returnArraySteps.push([...sortedArray.flat()])\r\n        }\r\n        randomArray = sortedArray.flat()\r\n    }\r\n    return returnArraySteps\r\n}\r\n\r\n//for selectionSort\r\nfunction indexLoc(nums){\r\n    for (var i = 0; i < nums.length;i++){\r\n        if(nums[i]==Math.min.apply(null,nums)){\r\n            return i\r\n        }\r\n    }\r\n}\r\n\r\nfunction selectionSort(randomArray) {\r\n    var returnArraySteps = []\r\n    var sortedArray = []\r\n    while(randomArray.length > 0){ //While the original array is not empty\r\n        //Get the min/max value\r\n        let value = Math.min.apply(null,randomArray)\r\n\r\n        //Remove the value from original array\r\n        randomArray.splice(indexLoc(randomArray),1);\r\n\r\n        //Add the value to the list\r\n        sortedArray.push(value)\r\n        returnArraySteps.push(sortedArray.concat(Array(randomArray.length).fill(0)))\r\n\r\n    }\r\n\r\n    return returnArraySteps\r\n}\r\n\r\n//for mergeSort\r\nvar mergeSortSteps = []\r\nvar initialArrayLengthMergeSort = []\r\nfunction mergeSortMerge(firstHalf,secondHalf){\r\n    var mergedArray = []\r\n\r\n    // while there is still numbers to merge\r\n    do{\r\n        //check to see if either array is empty, if so, then we know the remaining values are just the other array\r\n        if(firstHalf === undefined || firstHalf.length == 0){\r\n            mergedArray = mergedArray.concat(secondHalf)\r\n            break\r\n        }else if(secondHalf === undefined || secondHalf.length == 0){\r\n            mergedArray = mergedArray.concat(firstHalf)\r\n            break\r\n        }\r\n\r\n        //Check to see which array starts with a smaller value and append it into the new array\r\n        if(firstHalf[0]<secondHalf[0]){\r\n            let appendValue = firstHalf.shift()\r\n            mergedArray.push(appendValue)\r\n        }else{\r\n            let appendValue = secondHalf.shift()\r\n            mergedArray.push(appendValue)\r\n        }\r\n\r\n    }while(firstHalf.length + secondHalf.length > 0)\r\n\r\n    return mergedArray\r\n}\r\n\r\nfunction mergeSort(randomArray) {\r\n    if (randomArray.length > 1){//keep splitting until size 1\r\n        let midpoint = Math.round(randomArray.length/2) //Get the midpoint, if uneven, get the rounded up midpoint\r\n        //if not sorted\r\n        const firstHalf = mergeSort(randomArray.splice(0,midpoint))\r\n        const secondHalf = mergeSort(randomArray)\r\n\r\n        randomArray = mergeSortMerge(firstHalf,secondHalf)\r\n\r\n        if(randomArray.length > 2){\r\n            mergeSortSteps.push([...randomArray.concat(Array(initialArrayLengthMergeSort - randomArray.length).fill(0))])\r\n        }\r\n    }\r\n\r\n    return randomArray\r\n}\r\n\r\nfunction mergeSortHandler(randomArray){\r\n    initialArrayLengthMergeSort = randomArray.length\r\n    mergeSort(randomArray)\r\n    return mergeSortSteps\r\n}\r\n\r\n//for quickSort\r\nvar quickSortSteps = []\r\nvar initialArrayLengthQuickSort = []\r\nfunction mergeArrays(leftArray,partitionValue,rightArray){\r\n    if(rightArray==undefined && leftArray==undefined){\r\n        var sortedArray = [partitionValue]\r\n    }else if(rightArray==undefined){\r\n        var sortedArray = leftArray.concat([partitionValue])\r\n    }else if(leftArray==undefined){\r\n        var sortedArray = [partitionValue].concat(rightArray)\r\n    }else{\r\n        var sortedArray = leftArray.concat([partitionValue].concat(rightArray))\r\n    }\r\n\r\n    return sortedArray\r\n}\r\n\r\nfunction getHalves(partitionValue,randomArray){\r\n    let leftHalf = []\r\n    let rightHalf = []\r\n\r\n    //place into new arrays\r\n    for(var i = 0;i<randomArray.length;i++){\r\n        let value = randomArray[i]\r\n        if(value<partitionValue){leftHalf.push(value)}\r\n        else{rightHalf.push(value)}\r\n    }\r\n\r\n    return [leftHalf,rightHalf]\r\n}\r\n\r\nfunction quickSort(randomArray) {\r\n    if(randomArray!=undefined&&randomArray.length > 1){\r\n        const partitionValue = randomArray.pop()\r\n        const halves = getHalves(partitionValue,randomArray)\r\n        let mergedArray = mergeArrays(quickSort(halves[0]),partitionValue,quickSort(halves[1]))\r\n        quickSortSteps.push([...mergedArray.concat(Array(initialArrayLengthQuickSort - randomArray.length).fill(0))])\r\n        return mergedArray\r\n    }\r\n    return randomArray\r\n}\r\n\r\nfunction quickSortHandler(randomArray){\r\n    initialArrayLengthQuickSort = randomArray.length\r\n    quickSort(randomArray)\r\n    return quickSortSteps\r\n}\r\n\r\nexport {sortingAlgoList,bubbleSort,countingSort,heapSort,insertionSort,radixSort,selectionSort,mergeSortHandler,quickSortHandler}","const refreshPeriod = 400\r\n\r\nclass Dot extends React.Component{\r\n    render(){\r\n      return(\r\n        <div className=\"dot\" style={{opacity:this.props.value/100}}></div>\r\n      )\r\n    }\r\n  }\r\n\r\nclass Dots extends React.Component{\r\n  constructor(props){super()\r\n    this.state={sortingSteps:props.inputArray,\r\n                currentArray:props.inputArray[0],\r\n                index:0}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.setState(state => ({\r\n                                                              index: state.index < state.sortingSteps.length - 1? state.index + 1: 0,\r\n                                                              currentArray: state.sortingSteps[state.index]\r\n                                                            })), refreshPeriod)\r\n  }\r\n\r\n  render(){\r\n      let dots = this.state.currentArray.map((element,index) => <Dot value={this.state.currentArray[index]}/>)\r\n      return(\r\n      <div className=\"dotContainer\">\r\n          {dots}\r\n      </div>\r\n  )};\r\n}\r\n\r\nexport default Dots","import {sortingAlgoList,bubbleSort,countingSort,heapSort,insertionSort,mergeSortHandler,quickSortHandler,radixSort,selectionSort} from \"../assets/sortingAlgoList\"\r\nimport Dots from \"./Dots\"\r\n\r\nfunction processSort(randomArray,algoName){\r\n  if(algoName==\"Bubble Sort\"){\r\n    var arraySteps = bubbleSort([...randomArray])\r\n  }else if (algoName==\"Counting Sort\"){\r\n    var arraySteps = countingSort([...randomArray])\r\n  }else if (algoName==\"Heap Sort\"){\r\n    var arraySteps = heapSort([...randomArray])\r\n  }else if (algoName==\"Insertion Sort\"){\r\n    var arraySteps = insertionSort([...randomArray])\r\n  }else if (algoName==\"Merge Sort\"){\r\n    var arraySteps = mergeSortHandler([...randomArray])\r\n  }else if (algoName==\"Quick Sort\"){\r\n    var arraySteps = quickSortHandler([...randomArray])\r\n  }else if (algoName==\"Radix Sort\"){\r\n    var arraySteps = radixSort([...randomArray])\r\n  }else if (algoName==\"Selection Sort\"){\r\n    var arraySteps = selectionSort([...randomArray])\r\n  }else {var arraySteps = bubbleSort([...randomArray])}\r\n\r\n  return arraySteps\r\n}\r\n\r\nclass Algorithim extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"algorithim\">\r\n          <h1>{this.props.name}</h1>\r\n          <Dots inputArray={processSort(this.props.inputArray,this.props.name)}/>\r\n      </div>\r\n  )};\r\n}\r\n\r\nclass Header extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"sortingAlgorithimHeader\">\r\n        <h1>\r\n          Sorting Algorithims\r\n        </h1>\r\n        <h2>\r\n          Hello! This site is meant to be a quick reference guide to sorting algorithims, along with their explinations and a pretty animation for each algorithim. The input array is randomly generated each time this site loads and is then processed via each algorithim.\r\n        </h2>\r\n        <Dots inputArray={[this.props.inputArray]}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SortingAlgorithims extends React.Component{\r\n  constructor(){super()\r\n    //Generate a list of unique numbers\r\n    this.inputArray = [];\r\n    while(this.inputArray.length < 20){\r\n        var r = Math.floor(Math.random() * 100) + 1;\r\n        if(this.inputArray.indexOf(r) === -1) this.inputArray.push(r);\r\n    }\r\n\r\n    this.algorithimList = sortingAlgoList.map(algo => <Algorithim id={algo.id}\r\n                                                                  name={algo.name}\r\n                                                                  inputArray={this.inputArray}\r\n                                                                  directory={\"../SortingAlgorithims\"}/>)\r\n  }\r\n\r\n  render(){return(\r\n      <div className=\"sortingAlgoPage\">\r\n        <Header inputArray={this.inputArray} />\r\n        {this.algorithimList}\r\n      </div>\r\n  )}\r\n}\r\n\r\nexport default SortingAlgorithims","import checkCDNexist from \"../utilities/checkCDN\"\r\nimport SortingAlgorithims from \"../components/SortingAlgorithims\"\r\n\r\ncheckCDNexist();\r\nReactDOM.render(<SortingAlgorithims/>,document.getElementById(\"body\"))"]}