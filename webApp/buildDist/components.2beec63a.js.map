{"version":3,"sources":["utilities/checkCDN.js","assets/sortingAlgoList.js","components/Dots.js","assets/sortingAlgoHeader.js","components/SortingAlgorithims.js","components/index.js"],"names":["checkCDNexist","anime","React","ReactDOM","console","log","error","alert","sortingAlgoList","id","name","timeComplexity","spaceComplexity","desc","swapWithNext","inputArray","indexLoc","firstItem","bubbleSort","randomArray","returnArraySteps","finishPassing","i","length","push","countingSort","max","Math","apply","countArray","Array","fill","sortedArray","value","returnChildren","node","swapPositon","pos1","pos2","tempVariable","heapify","nodeChildren","lastLoop","undefined","heapSort","returnArray","lastElement","pop","concat","reverse","insert","number","splice","insertionSort","insertionValue","radixMagnitudeValue","magnitude","strValue","magValue","parseInt","isNaN","radixSort","map","element","index","magVal","flat","log2","nums","min","selectionSort","range","from","to","keys","copytoSteps","inMemoryArray","newArray","leftBound","rightBound","indexRange","mergeSortSteps","arrayMemoryMS","mergeSortMerge","firstHalf","secondHalf","mergedArray","appendValue","shift","mergeSort","midpoint","ceil","slice","mergeSortHandler","quickSortSteps","arrayMemoryQS","mergeArrays","leftArray","partitionValue","rightArray","getHalves","leftHalf","rightHalf","quickSort","halves","leftHalfSorted","rightHalfSorted","quickSortHandler","refreshPeriod","Dot","opacity","props","Component","Dots","state","sortingSteps","currentArray","interval","setInterval","setState","dots","headerContent","title","description","link","processSort","algoName","arraySteps","Algorithim","Header","SortingAlgorithims","r","floor","random","indexOf","algorithimList","algo","render","document","getElementById"],"mappings":";;AKAA;;AACA;;AFDA,AHAA,IGAIyH,aAAa,GAAG;AAClBC,ACDF,AJAC,EGCCA,KAAK,EAAC,qBADY;AAElBC,AECF,ALHkG,EGEhGA,WAAW,EAAC,6bAFM;AAGlBC,ACFF,ACGAzH,ALHA,EGEEyH,IAAI,EAAC,AECC,CAACa,MAAT,CAAgB,oBAAC,2BAAD,OAAhB,EAAsCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAtC;AFJoB,AHCnB,CGDD;ACEA,AJD0G,eGK3FlB;AHJf;AAAC;AAAsG;;AAEvG,SAASzH,aAAT,GAAwB;AACpB,MAAI;AACAC,IAAAA,KAAK,GAAGA,KAAR;AACAC,IAAAA,KAAK,GAAGA,KAAR;AACAC,IAAAA,QAAQ,GAAGA,QAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;ACVpB,ADWQC,ICXFC,ADWED,KAAK,CAAC,SCXO,GAAG,CACpB,uDDUS,CAAL;ACTAE,ADUH,ECVGA,EAAE,EAAC,YADP;AAEIC,ACHR,AFaC,ECVOA,ECHFkG,EDGM,EAAC,SCHM,GAAG,CDClB,ECDJ;ADIQjG,EAAAA,cAAc,EAAC,MAHnB;AAIIC,EAAAA,ECHFiG,WFaS7G,ECVQ,EAAC,GAJpB;AAKIa,EAAAA,IAAI,EAAC;AALT,CADoB,EAQpB;AACIJ,EAAAA,EAAE,EAAC,eADP;AAEIC,EAAAA,IAAI,EAAC,gBAFT;AAGIC,EAAAA,cAAc,EAAC,MAHnB;AAIIC,EAAAA,eAAe,EAAC,GAJpB;AAKIC,EAAAA,IAAI,EAAC;AALT,CARoB,EAepB;AACIJ,EAAAA,EAAE,EAAC,UADP;AAEIC,EAAAA,IAAI,EAAC,WAFT;AAGIC,EAAAA,cAAc,EAAC,UAHnB;AAIIC,EAAAA,eAAe,EAAC,GAJpB;AAKIC,EAAAA,IAAI,EAAC,qBCjBH;ADYN,ACXA,AEAJ,CHJwB,EAsBpB,MGlBKgH,IFCH,OEDN,CAAqB1G,WAArB,EAAiC2G,QAAjC,EAA0C;AHmBlCrH,AClBG,AEAT,EHkBMA,EAAE,EAAC,AGlBNqH,EFAM,MEAE,GFAO,CEAL,CFAM,EDiBjB,GCjBE,OEAJ,EAA2B;AHmBrBpH,ACnBmB,AECvB,EHkBIA,IAAI,EAAC,ACnBc,AECnBqH,KFDwB,EAAE,GEChB,GAAG,GHgBjB,iDGhBgC5G,WAAf,EAAjB;AHmBIR,ACpB2BmG,AEEhC,EHkBKnG,CGpBN,MAEM,CFF2BmG,GEEvBgB,GHkBU,CCpBoB,CDoBnB,CCpBoB,EEEvB,GHehB,ACjB4Cf,CEE1B,IFFqB,CAAW9E,KAAX,GAAiB,EEEpD,EAA8B;AHmB9BrB,ACrB0B,AEG9B,EHkBIA,MGlBAmH,SHkBe,CGlBL,CHkBM,EGlBH,CHcjB,qDGdkC5G,WAAjB,EAAjB;AHmBIN,ACtBF,AEIH,EHkBKA,CGpBA,GHoBI,EAAC,ACvBT,CEKI,IAAIiH,QAAQ,IAAE,WAAd,EAA0B;AHa9B,ACfD,AEGC,CHVoB,EA6BpB,KGnBIC,UAAU,GAAG,kDAAa5G,WAAb,EAAjB;AHoBIV,AGnBL,EHmBKA,CGrBA,CHqBE,EAAC,GGnBH,IAAIqH,OHkBR,CGlBgB,IAAE,gBAAd,EAA+B;AHoB/BpH,AGnBJ,EHmBIA,IAAI,EAAC,AGnBLqH,UAAU,GAAG,EHiBjB,qDGjBmC5G,WAAlB,EAAjB;AHoBIR,AGnBL,EHmBKA,CGrBA,MAEA,IAAImH,GHmBU,EAAC,GGnBH,EHgBhB,EGhBkB,YAAd,EAA2B;AHoB3BlH,AGnBJ,EHmBIA,AC/BUV,KAAK,CAAC8G,AEYhBe,SHmBe,CGnBL,CHmBM,EGnBH,CHejB,yDGfsC5G,WAArB,EAAjB;AHoBIN,AGnBL,EHmBKA,CGrBA,GHqBI,EAAC,CGnBL,IAAIiH,QAAQ,IAAE,YAAd,EAA2B;AHc/B,AGbA,CHhBoB,EAoCpB,CC1BEb,IEMEc,UAAU,GAAG,0DAAqB5G,WAArB,EAAjB;AHqBIV,AGpBL,EHoBKA,CGtBA,CHsBE,EAAC,GGpBH,IAAIqH,IHmBR,IGnBgB,IAAE,YAAd,EAA2B;AHqB3BpH,AGpBJ,EHoBIA,IAAI,EAAC,AGpBLqH,UAAU,EHkBd,CGlBiB,mDAAc5G,WAAd,EAAjB;AHqBIR,AGpBL,EHoBKA,CGtBA,MAEA,IAAImH,GHoBU,EAAC,GGpBH,CHiBhB,GGjBkB,gBAAd,EAA+B;AHqB/BlH,AGpBJ,EHoBIA,MGpBAmH,SHoBe,CGpBL,CHoBM,EGpBH,GHgBjB,oDGhBmC5G,WAAlB,EAAjB;AHqBIN,AC9BN,AEUC,EHoBKA,CGtBA,GHsBI,EAAC,CGpBL,OFVMkG,KAAZ,EAAkB;ADyBhB,ACzBgB,AEUX,CHrBe,EA2CpB,KGtBSgB,UAAU,GAAG,oDAAe5G,WAAf,EAAjB;AHuBDV,AGvB+C,EHuB/CA,EAAE,EAAC,WADP;AAEIC,AClCY,EDkCZA,IAAI,EAAC,YAFT;AAGIC,AGvBN,EHuBMA,OGvBCoH,OHuBa,EAAC,CGvBrB,SHoBE;AAIInH,ACpCa,AEapB,EHuBOA,eAAe,EAAC,GAJpB;AAKIC,ACpCJ,EDoCIA,IAAI,EAAC,ECpCJqG,KAAL,GAAW;AD+BX,AC9BcC,CDbM,EAkDpB,CGxBEa,EFbYb,YAAY,EAACJ,KAAK,CAAChG,UADtB;ADuCPN,ACrCU2G,EDqCV3G,EAAE,EAAC,ACrCO2G,WDoCd,CCpC0B,EAACL,KAAK,CAAChG,UAAN,CAAiB,CAAjB,CAFhB;ADwCPL,ACrCUsD,EDqCVtD,IAAI,ACrCMsD,EDqCL,GCrCU,EAAC,ODmCpB;AAGIrD,ACzCO,EDyCPA,GCzCJ,WDyCkB,EAAC,UAHnB;AAIIC,AC3CY,ED2CZA,eAAe,EAAC,QAJpB;AAKIC,ACtCL,EDsCKA,IAAI,EAAC;AALT,CAlDoB,CAAxB,EA2DA;;;wCCxCsB;ADyCtB,ACzCsB,SDyCbC,YAAT,CAAsBC,UAAtB,EAAiCC,QAAjC,EAA0C;AACtC,MAAIC,SAAS,GAAGF,UAAU,CAACC,QAAD,CAA1B;AACAD,AC1CA,ED0CAA,SC1CKsG,CD0CK,CAACrG,MC1CX,ED0CU,CAAV,AC1CgBsG,GD0COvG,QC1CI,CAAC,CD0CK,CAACC,QAAQ,GAAC,CAAV,CAAjC;AACAD,AC3C4B,ED2C5BA,UAAU,CAACC,EC3CuB,MD2Cf,AC3CmB,CAACuG,ED2CnB,CAAV,CAAV,GAAyBtG,AGpCnB,CFP4B,CAAc,OD2ChD,GC3CgDiG,KAAK;AD4CrD,AC5CqD,AEQrD,SHoCOnG,IGnCL,IFTwD,ED4C1D;AACH,AC5C6DiD,AEQnD,QAAA,IFRmDA,KAAK,AEQ/C,EFRiDkD,AEQhD,KFRqD,CAAClD,KAAN,GAAckD,KAAK,CAACC,YAAN,CAAmB5F,MAAnB,GAA4B,CAA1C,GAA6C2F,KAAK,CAAClD,KAAN,GAAc,CAA3D,GAA8D,CADrE;AAEAoD,AEOxD,SACI,GFRoDA,YAAY,EAAEF,KAAK,CAACC,YAAN,CAAmBD,KAAK,CAAClD,KAAzB;AD6C5E,AC/C8D,AEUhD,QAAA,CHqCL9C,EC/CgD,MEUlC,EHqCvB,AGrCwB,CHqCJC,WAApB,EAAiC;AAC7B,AChDqD,AEU/C,MHsCFC,GChD8B,AEUF,CFVJ,IEUS2F,KAAL,CAAWrG,EHsCvB,EGtCd,CHsCiB,AGvCrB,EHuCF,AGrCM;AFXsB,AEWlB,OFXiB,CEWjB,CFRmDkG,QEQ1C,EAAC,GFXO,CAA3B;ADiDA,AC7CD,AEOO,KHsCJ,cGtC2C,KAAKG,KAAL,CAAWpG,cAAlD,CAFJ,EAGI;AHsCF,AGtCM,QHsCFU,AGtCE,SAAS,EAAC,EHsCC,GAAG,IAApB;AGtCE,oBAAwC,KAAK0F,KAAL,CAAWnG,eAAnD,CAHJ,EAII;AHsCF,AGtCM,QAAA,CHsCF,IAAIU,CAAC,GAAG,AGtCG,CHsCf,CGtCgB,CHsCFA,CAAC,GAAGH,KC7ChB,MD6C2B,CAACI,MAA9B,EAAqCD,CAAC,EAAtC,EAAyC;AACrC,AC9CF,AEOA,SAAsB,CHuCjBH,IGvCsB4F,KAAL,CAAWlG,CHuCjB,CAACS,CAAD,CAAX,AGvCL,CAJJ,EH2C0BH,AGtCtB,WHsCiC,CAACG,CAAC,GAAC,CAAH,CAA/B,EAAqC,AGtCtC,aAAD;AHuCMH,AGvCA,QHuCAA,AGvCA,SAAS,EHuCE,AGvCD,qBAAhB,CHuCwBL,YAAY,CAACK,WAAD,EAAaG,CAAb,CAAnB,CAAX;AACAF,AC/CV,AEO0C,QHwChCA,AGxCgC,EFPtCoG,IAAI,GAAG,CEOyC,EAAEK,EFPtCX,ED+CU,CAAC1F,EC/ChB,CAAW4F,CD+CZ,CAAsBjG,CGxCiC,CAAC,KAAK4F,GFP5D,CD+CD,AC/CyBjD,CEO+B,CAAW/C,CFPlE,CAA4B,QEO0B,EFPzBgD,AEOgD,KAAKgD,EFPtD,EAAS/C,CEOwC,CAAWtD,GFP5D,CEO0B;AHyCvDW,AChD6B,AEOnC,QHyCMA,AG9CV,CADF,MFD4D,MDgDnC,GAAG,KAAhB,MChDiD,GAAD;ADiDnD,ACjDwD,AESjE,UFTiE,KAAK,EAAE,MAAI,CAAC6F,KAAL,CAAWE,YAAX,CAAwBpD,KAAxB;ADkDnE,AClDuD,UAAnB;ADmDxC,ACnDwC,GD0CzC,IC1Ca,CAAX,GDmDK3C,aAAa,IAAI,KATxB;ACzCE,aACA;ADmDF,ACnDO,EEHcnB,KAAK,CFGnB,AEHoB8G,CHsDpB5F,QCnDS,EAAC,MDmDjB;AACH,ACpDK,SACKoG,IADL,CADA;AAIF,IEOES;AH4CN,SAASxG,YAAT,CAAsBN,WAAtB,EAAkC;AAC9B,MAAIC,gBAAgB,GAAG,EAAvB,CAD8B,CAE9B;;AACA,EC5EelB,ID4ETwB,CC5Ec,CAACsF,CD4EZ,GAAGrF,IAAI,CAACD,GAAL,CAASE,KAAT,CAAe,IAAf,EAAoBT,WAApB,CAAZ;AACA,MAAIU,UAAU,GAAG,IAAIC,KAAJ,CAAUJ,GAAG,GAAC,CAAd,EAAiBK,IAAjB,CAAsB,CAAtB,CAAjB,CAJ8B,CAM9B;eCtDWkF;ADuDX,OAAI,IAAI3F,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACH,WAAW,CAACI,MAA5B,EAAmCD,CAAC,EAApC,EAAuC;AACnCO,IAAAA,UAAU,CAACV,WAAW,CAACG,CAAD,CAAZ,CAAV,GAA6BO,UAAU,CAACV,WAAW,CAACG,CAAD,CAAZ,CAAV,GAA6B,CAA1D;AACH,GAT6B,CAW9B;;;AACA,OAAI,IAAIA,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACI,GAAhB,EAAoBJ,CAAC,EAArB,EAAwB;AACpBO,IAAAA,UAAU,CAACP,CAAC,GAAC,CAAH,CAAV,GAAkBO,KGxDhB,KHwD0B,CAACP,CAAC,GAAC,CAAH,CAAV,GAAkBO,UAAU,CAACP,CAAD,CAA9C;AACH,AGxDD,aACE;AAAK,QAAA,SAAS,EAAC;AHyDjB,AGzDE,MHyDEU,GGxDA,QHwDW,GAAGF,KAAK,CAACX,WAAW,CAACI,GGvD7BkG,GHuDgB,CAAL,CAA0B1F,IAA1B,CAA+B,CAA/B,CAAlB,CAhB8B,CAiB9B,aGxDqB2F,KADjB,CADF,EAIE,gCACGD,2BAAcE,WADjB,CAJF,EAOE,mGAAmE;AAAG,QAAA,IAAI,EAAEF,2BAAcG;AHoD9F,AGpDuE,OHoDnE,IAAItG,CAAC,GAAGH,WAAW,CAACI,CGpDpB,CAPF,EAQE,EHmDQ,GAAqB,CAAjC,EAAmCD,CAAC,GAAG,CAAC,CAAxC,EAA0CA,CAAC,EAA3C,CGnDK,CHmDyC,YGnD1C;AHoDA,AGpDM,QHoDFW,AGpDE,KHoDG,GAAGd,EGpDI,EAAE,CAAC,KAAK4F,CHoDD,CAACzF,CAAD,CAAvB,CGpDmB,CAAWP,UAAZ;AHqDlBiB,AGrDA,IHqDAA,IG7DF,CADF,MH8De,CAACH,UAAU,CAACI,KAAD,CAAV,GAAkB,CAAnB,CAAX,GAAmCA,KAAnC;AACAJ,AGnDL,IHmDKA,UAAU,CAACI,KAAD,CAAV,GAAoBJ,UAAU,CAACI,KAAD,CAAV,GAAmB,CAAvC;AACAb,IAAAA,gBAAgB,CAACI,IAAjB,oBAA0BQ,WAA1B;AACH;;AAED,EGrEiB9B,KAAK,CAAC8G,CHqEhB5F,gBAAP;AACH,EAED;IGvDM8G;;AHwDN,IAAMhG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAAC,SAAO,CAACA,IAAI,GAAC,CAAL,GAAO,CAAR,EAAUA,IAAI,GAAC,CAAL,GAAO,CAAjB,CAAP;AAA2B,CAA7D;AGvDE,gCAAa;AHyDf,AGzDe,SHyDNC,WAAT,CAAqBrB,UAArB,EAAgCsB,IAAhC,EAAqCC,IAArC,EAA0C;AACtC,MAAMC,YAAY,GAAGxB,UAAU,CAACsB,IAAD,CAA/B;AACAtB,AG3DW,EH2DXA,UAAU,CAACsB,IAAD,CAAV,GAAmBtB,UAAU,CAACuB,IAAD,CAA7B;AACAvB,EAAAA,UAAU,CAACuB,IAAD,CAAV,GAAmBC,YAAnB;AACA,AG7DY,SH6DLxB,UAAP,0EG7DW,CACX;AH6DH;AG5DG,UAAKA,UAAL,GAAkB,EAAlB;AH8DJ,SAASyB,OAAT,CAAiBrB,WAAjB,EAA6BgB,IAA7B,EAAkC;AAC9B,AG9DA,MH8DMM,KG9DA,MAAK1B,CH8DO,GAAGmB,MG9Df,CAAgBX,MAAhB,CH8D6B,CAACY,CG9DL,EAA/B,CH8DmC,CAAnC,AG9DkC;AAC9B,UAAIgG,CAAC,GAAGxG,IAAI,CAACyG,KAAL,CAAWzG,IAAI,CAAC0G,MAAL,KAAgB,GAA3B,IAAkC,CAA1C;AH8DJ,AG7DI,KH6DF,KG7DK,MAAKtH,UAAL,CAAgBuH,OAAhB,CAAwBH,CAAxB,MAA+B,CAAC,CAAnC,EAAsC,MAAKpH,UAAL,CAAgBS,IAAhB,CAAqB2G,CAArB;AH8DtC,AG7DH,QH6DOzF,QAAQ,GAAG,IAAf,CADF,CAEE;;AACA,AG7DJ,QH6DOvB,EG7DFoH,SH6Da,CAACpG,IAAD,AG7DlB,CH6DO,EG7De3B,CH6DGW,WAAW,CAACsB,YAAY,CAAC,CAAD,CAAb,CAAhC,EAAkD,EG7DhBqB,GAAhB,CAAoB,UAAA0E,IAAI;AH8DtC,AG9DsC,aAAI,oBAAC,UAAD;AH+D1CrH,AG/DsD,MH+DtDA,EG/DsD,EAAE,EAAEqH,IAAI,CH+DnD,AG/DoD/H,EAArB,CH+D5B2B,WAAW,CAACjB,WAAD,EAAagB,IAAb,EAAkBM,YAAY,CAAC,CAAD,CAA9B,CAAzB;AACAC,AG/DsD,MH+DtDA,EG/DsD,IAAI,EH+DlD,AG/DoD8F,GH+DjD,CG/DqD,CAAC9H,GH+DjE,CGhE0C;AHiE7C,AG/DyD,QAAA,cAAc,EAAE8H,IAAI,CAAC7H,cAFjC;AAGY,QAAA,eAAe,EAAE6H,IAAI,CAAC5H,eAHlC;AHmE9C,AG/D0D,QH+DvDO,AG/DuD,IAAI,EAAEqH,IAAI,CH+DtD,AG/DuD3H,CH+DtDsB,GGnE+B,CHmEhC,CAAX,GAAkBhB,WAAW,CAACsB,YAAY,CAAC,CAAD,CAAb,CAAhC,EAAkD;AAC9C,AG/DsD,QAAA,UAAU,EAAE,MAAK1B,UAL7B;AHqE1CI,AG/DsD,MH+DtDA,EG/DsD,SH+D3C,AG/DoD,EAAE,CH+DnDiB,WAAW,CAACjB,WAAD,EAAagB,IAAb,EAAkBM,YAAY,CAAC,CAAD,CAA9B,CAAzB;AACAC,AGtE0C,MHsE1CA,EGtEsC,MHsE9B,GAAG,KAAX;AACH,AGvEyC,KH0D5C,AG1DoB,CHyElB,AGzEJ;AARW;AAeZ;AHmEK,QAAGvB,WAAW,CAACsB,YAAY,CAAC,CAAD,CAAb,CAAX,IAA8BE,SAAjC,EAA2C;AACvCxB,MAAAA,WAAW,GAAGqB,OAAO,CAACrB,WAAD,EAAasB,YAAY,CAAC,CAAD,CAAzB,CAArB;AACH;6BGnEC;AHoEF,AGpEG,QHoEAtB,KGnEL,MHmEgB,CAACsB,YAAY,CAAC,CAAD,CAAb,CAAX,IAA8BE,SAAjC,EAA2C;AACvCxB,AGpED,MHoECA,EGpED,SHoEY,AGpEH,EAAC,CHoEKqB,OAAO,CAACrB,WAAD,EAAasB,YAAY,CAAC,CAAD,CAAzB,CAArB;AACH,AGrEH,SACE,oBAAC,MAAD;AHqEH,AGrEW,GH+CZ,KG/CY,GHqELC,OGrEe,CHqEP,CGrES,GHqEP,EGrEY3B,GH+C7B;AG/CI,QADF,EAEG,KAAKwH,cAFR,CADK;AHwEP,AGnEA,SHmEOpH,WAAP;AACH;;AAED,SAASyB,QAAT,CAAkBzB,WAAlB,EAA8B;AAC1B,EG9F6BjB,IH8FzB8B,CG9F8B,CAACgF,SH8FpB,GAAG,EAAlB;AACA,MAAInE,WAAW,GAAG,EAAlB;eGrEWqF;AHsEX,SAAM/G,WAAW,IAAEwB,SAAb,IAAwBxB,WAAW,CAACI,MAAZ,IAAoB,CAAlD,EAAoD;AAChDJ,IAAAA,WAAW,GAAGqB,OAAO,CAACrB,WAAD,EAAa,CAAb,CAArB,CADgD,CAGhD;;AACAA,IAAAA,WAAW,GAAGiB,WAAW,CAACjB,WAAD,EAAa,CAAb,EAAeA,WAAW,CAACI,MAAZ,GAAmB,CAAlC,CAAzB,CAJgD,CAKhD;;AACA,QAAIuB,WAAW,GAAG3B,WAAW,CAAC4B,GAAZ,EAAlB;AACAf,IAAAA,WAAW,CAACR,IAAZ,CAAiBsB,WAAjB;AACAD,IAAAA,WAAW,CAACrB,IAAZ,oBAAqBL,WAAW,CAAC6B,MAAZ,CAAmBhB,WAAnB,EAAgCiB,OAAhC,EAArB;AACH,GAZyB,CAa1B;;;AACA,SAAOJ,WAAP;AACH,EAED;;;AACA,SAASK,MAAT,CAAgBnC,UAAhB,EAA2BoC,MAA3B,EAAkC;AAC9B;AACA,OAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAsCD,CAAC,EAAvC,EAA0C;AACtC,QAAG6B,MAAM,IAAIpC,UAAU,CAACO,CAAD,CAAvB,EAA2B;AACvBP,MAAAA,UAAU,CAACqC,MAAX,CAAkB9B,CAAlB,EAAoB,CAApB,EAAsB6B,MAAtB;AACA,aAAOpC,UAAP;AACH;AACJ;AACJ;;AAED,SAASsC,aAAT,CAAuBlC,WAAvB,EAAoC;AAChC,MAAIC,gBAAgB,GAAG,EAAvB;;AACA,OAAI,IAAIE,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAGH,WAAW,CAACI,MAA9B,EAAqCD,CAAC,EAAtC,EAAyC;AACrC,QAAGH,WAAW,CAACG,CAAC,GAAC,CAAH,CAAX,GAAmBH,WAAW,CAACG,CAAD,CAAjC,EAAqC;AACjC,UAAIgC,cAAc,GAAGnC,WAAW,CAACiC,MAAZ,CAAmB9B,CAAnB,EAAqB,CAArB,EAAwB,CAAxB,CAArB;AACAH,MAAAA,WAAW,sBAAO+B,MAAM,CAAC/B,WAAD,EAAamC,cAAb,CAAb,CAAX;AACAlC,MAAAA,gBAAgB,CAACI,IAAjB,CAAsBL,WAAtB;AACH;AACJ;;AACD,SAAOC,gBAAP;AACH,EAED;;;AACA,IAAMmC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACtB,KAAD,EAAOuB,SAAP,EAAmB;AAC3C,MAAIC,QAAQ,GAAG,KAAGxB,KAAlB;AACA,MAAIyB,QAAQ,GAAGC,QAAQ,CAACF,QAAQ,CAACA,QAAQ,CAAClC,MAAT,GAAkBiC,SAAlB,GAA8B,CAA/B,CAAT,CAAvB;;AACA,MAAGI,KAAK,CAACF,QAAD,CAAR,EAAmB;AACf,WAAO,CAAP;AACH,GAFD,MAEK;AACD,WAAOA,QAAP;AACH;AACJ,CARD;;AAUA,SAASG,SAAT,CAAmB1C,WAAnB,EAA+B;AAC3B,MAAIC,gBAAgB,GAAG,EAAvB;AACAD,EAAAA,WAAW,GAAGA,WAAW,CAAC2C,GAAZ,CAAgB,UAAAC,OAAO;AAAA,oBAAI,CAAJ,EAAOA,OAAP;AAAA,GAAvB,CAAd;;AACA,OAAI,IAAIP,SAAS,GAAG,CAApB,EAAsB,aAAIA,SAAJ,KAAiB7B,IAAI,CAACD,GAAL,CAASE,KAAT,CAAe,IAAf,EAAoBT,WAApB,CAAvC,EAAwEqC,SAAS,EAAjF,EAAoF;AAChF,QAAIxB,WAAW,GAAGF,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,EAAf,CAAlB;;AACA,SAAI,IAAIiC,KAAK,GAAC,CAAd,EAAgBA,KAAK,GAAC7C,WAAW,CAACI,MAAlC,EAAyCyC,KAAK,EAA9C,EAAiD;AAC7C,UAAI/B,KAAK,GAAGd,WAAW,CAAC6C,KAAD,CAAvB;AACA,UAAIC,MAAM,GAAGV,mBAAmB,CAACtB,KAAD,EAAOuB,SAAP,CAAhC;AACAxB,MAAAA,WAAW,CAACiC,MAAD,CAAX,GAAsBjC,WAAW,CAACiC,MAAD,CAAX,CAAoBjB,MAApB,CAA2B,CAACf,KAAD,CAA3B,CAAtB;AACH;;AACDd,IAAAA,WAAW,GAAGa,WAAW,CAACkC,IAAZ,EAAd;AACA9C,IAAAA,gBAAgB,CAACI,IAAjB,oBAA0BL,WAAW,CAAC2C,GAAZ,CAAgB,UAAAC,OAAO;AAAA,aAAIpC,IAAI,CAACwC,IAAL,CAAUJ,OAAV,CAAJ;AAAA,KAAvB,CAA1B;AACH;;AACD,SAAO3C,gBAAP;AACH,EAED;;;AACA,SAASJ,QAAT,CAAkBoD,IAAlB,EAAuB;AACnB,OAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8C,IAAI,CAAC7C,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AAChC,QAAG8C,IAAI,CAAC9C,CAAD,CAAJ,IAASK,IAAI,CAAC0C,GAAL,CAASzC,KAAT,CAAe,IAAf,EAAoBwC,IAApB,CAAZ,EAAsC;AAClC,aAAO9C,CAAP;AACH;AACJ;AACJ;;AAED,SAASgD,aAAT,CAAuBnD,WAAvB,EAAoC;AAChC,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIY,WAAW,GAAG,EAAlB;;AACA,SAAMb,WAAW,CAACI,MAAZ,GAAqB,CAA3B,EAA6B;AAAE;AAC3B;AACA,QAAIU,KAAK,GAAGN,IAAI,CAAC0C,GAAL,CAASzC,KAAT,CAAe,IAAf,EAAoBT,WAApB,CAAZ,CAFyB,CAIzB;;AACAA,IAAAA,WAAW,CAACiC,MAAZ,CAAmBpC,QAAQ,CAACG,WAAD,CAA3B,EAAyC,CAAzC,EALyB,CAOzB;;AACAa,IAAAA,WAAW,CAACR,IAAZ,CAAiBS,KAAjB;AACAb,IAAAA,gBAAgB,CAACI,IAAjB,CAAsBQ,WAAW,CAACgB,MAAZ,CAAmBlB,KAAK,CAACX,WAAW,CAACI,MAAb,CAAL,CAA0BQ,IAA1B,CAA+B,CAA/B,CAAnB,CAAtB;AAEH;;AAED,SAAOX,gBAAP;AACH,EAED;;;AACA,SAASmD,KAAT,CAAeC,IAAf,EAAoBC,EAApB,EAAwB;AACpB,SAAO,mBAAI3C,KAAK,CAAC2C,EAAE,GAACD,IAAJ,CAAL,CAAeE,IAAf,EAAJ,EAA2BZ,GAA3B,CAA+B,UAAAxC,CAAC;AAAA,WAAIA,CAAC,GAAGkD,IAAR;AAAA,GAAhC,CAAP;AACH;;AAED,SAASG,WAAT,CAAqBC,aAArB,EAAmCC,QAAnC,EAA4CC,SAA5C,EAAsDC,UAAtD,EAAiE;AAC7D,MAAIC,UAAU,GAAGT,KAAK,CAACO,SAAD,EAAWC,UAAX,CAAtB;;AACA,OAAI,IAAIzD,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAAC0D,UAAU,CAACzD,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AAClCsD,IAAAA,aAAa,CAACI,UAAU,CAAC1D,CAAD,CAAX,CAAb,GAA+BuD,QAAQ,CAACvD,CAAD,CAAvC;AACH;AACJ,EAED;AACA;;;AACA,IAAI2D,cAAc,GAAG,EAArB;AACA,IAAIC,aAAa,GAAG,EAApB;;AAEA,SAASC,cAAT,CAAwBC,SAAxB,EAAkCC,UAAlC,EAA6C;AACzC,MAAIC,WAAW,GAAG,EAAlB,CADyC,CAGzC;;AACA,KAAE;AACE;AACA,QAAGF,SAAS,KAAKzC,SAAd,IAA2ByC,SAAS,CAAC7D,MAAV,IAAoB,CAAlD,EAAoD;AAChD+D,MAAAA,WAAW,GAAGA,WAAW,CAACtC,MAAZ,CAAmBqC,UAAnB,CAAd;AACA;AACH,KAHD,MAGM,IAAGA,UAAU,KAAK1C,SAAf,IAA4B0C,UAAU,CAAC9D,MAAX,IAAqB,CAApD,EAAsD;AACxD+D,MAAAA,WAAW,GAAGA,WAAW,CAACtC,MAAZ,CAAmBoC,SAAnB,CAAd;AACA;AACH,KARH,CAUE;;;AACA,QAAGA,SAAS,CAAC,CAAD,CAAT,GAAaC,UAAU,CAAC,CAAD,CAA1B,EAA8B;AAC1B,UAAIE,WAAW,GAAGH,SAAS,CAACI,KAAV,EAAlB;AACAF,MAAAA,WAAW,CAAC9D,IAAZ,CAAiB+D,WAAjB;AACH,KAHD,MAGK;AACD,UAAIA,YAAW,GAAGF,UAAU,CAACG,KAAX,EAAlB;;AACAF,MAAAA,WAAW,CAAC9D,IAAZ,CAAiB+D,YAAjB;AACH;AAEJ,GAnBD,QAmBOH,SAAS,CAAC7D,MAAV,GAAmB8D,UAAU,CAAC9D,MAA9B,GAAuC,CAnB9C;;AAqBA,SAAO+D,WAAP;AACH;;AAED,SAASG,SAAT,CAAmBtE,WAAnB,EAA+B2D,SAA/B,EAAyCC,UAAzC,EAAqD;AACjD,MAAI5D,WAAW,CAACI,MAAZ,GAAqB,CAAzB,EAA2B;AAAC;AACxB,QAAImE,QAAQ,GAAG/D,IAAI,CAACgE,IAAL,CAAU,mBAAIxE,WAAJ,EAAiBI,MAAjB,GAAwB,CAAlC,CAAf,CADuB,CAC6B;AACpD;;AACA,QAAM6D,SAAS,GAAGK,SAAS,CAACtE,WAAW,CAACyE,KAAZ,CAAkB,CAAlB,EAAoBF,QAApB,CAAD,EAA+BZ,SAA/B,EAAyCY,QAAQ,GAACZ,SAAlD,CAA3B;AACA,QAAMO,UAAU,GAAGI,SAAS,CAACtE,WAAW,CAACyE,KAAZ,CAAkBF,QAAlB,EAA2BvE,WAAW,CAACI,MAAvC,CAAD,EAAgDmE,QAAQ,GAACZ,SAAzD,EAAmEC,UAAnE,CAA5B;AACA5D,IAAAA,WAAW,GAAGgE,cAAc,CAACC,SAAD,EAAWC,UAAX,CAA5B;AACH;;AAEDV,EAAAA,WAAW,CAACO,aAAD,EAAe/D,WAAf,EAA2B2D,SAA3B,EAAqCC,UAArC,CAAX;AACAE,EAAAA,cAAc,CAACzD,IAAf,oBAAwB0D,aAAxB;AACA,SAAO/D,WAAP;AACH;;AAED,SAAS0E,gBAAT,CAA0B1E,WAA1B,EAAsC;AAClC+D,EAAAA,aAAa,GAAG/D,WAAhB;AACAsE,EAAAA,SAAS,CAACtE,WAAD,EAAa,CAAb,EAAeA,WAAW,CAACI,MAA3B,CAAT;AACA,SAAO0D,cAAP;AACH,EAED;;;AACA,IAAIa,cAAc,GAAG,EAArB;AACA,IAAIC,aAAa,GAAG,EAApB;;AACA,SAASC,WAAT,CAAqBC,SAArB,EAA+BC,cAA/B,EAA8CC,UAA9C,EAAyD;AACrD,MAAGA,UAAU,IAAExD,SAAZ,IAAyBsD,SAAS,IAAEtD,SAAvC,EAAiD;AAC7C,QAAIX,WAAW,GAAG,CAACkE,cAAD,CAAlB;AACH,GAFD,MAEM,IAAGC,UAAU,IAAExD,SAAf,EAAyB;AAC3B,QAAIX,WAAW,GAAGiE,SAAS,CAACjD,MAAV,CAAiB,CAACkD,cAAD,CAAjB,CAAlB;AACH,GAFK,MAEA,IAAGD,SAAS,IAAEtD,SAAd,EAAwB;AAC1B,QAAIX,WAAW,GAAG,CAACkE,cAAD,EAAiBlD,MAAjB,CAAwBmD,UAAxB,CAAlB;AACH,GAFK,MAED;AACD,QAAInE,WAAW,GAAGiE,SAAS,CAACjD,MAAV,CAAiB,CAACkD,cAAD,EAAiBlD,MAAjB,CAAwBmD,UAAxB,CAAjB,CAAlB;AACH;;AAED,SAAOnE,WAAP;AACH;;AAED,SAASoE,SAAT,CAAmBF,cAAnB,EAAkC/E,WAAlC,EAA8C;AAC1C,MAAIkF,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB,CAF0C,CAI1C;;AACA,OAAI,IAAIhF,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACH,WAAW,CAACI,MAA5B,EAAmCD,CAAC,EAApC,EAAuC;AACnC,QAAIW,KAAK,GAAGd,WAAW,CAACG,CAAD,CAAvB;;AACA,QAAGW,KAAK,GAACiE,cAAT,EAAwB;AAACG,MAAAA,QAAQ,CAAC7E,IAAT,CAAcS,KAAd;AAAqB,KAA9C,MACI;AAACqE,MAAAA,SAAS,CAAC9E,IAAV,CAAeS,KAAf;AAAsB;AAC9B;;AAED,SAAO,CAACoE,QAAD,EAAUC,SAAV,CAAP;AACH;;AAED,SAASC,SAAT,CAAmBpF,WAAnB,EAA+B2D,SAA/B,EAAyCC,UAAzC,EAAqD;AACjD,MAAG5D,WAAW,IAAEwB,SAAb,IAAwBxB,WAAW,CAACI,MAAZ,GAAqB,CAAhD,EAAkD;AAC9C,QAAM2E,cAAc,GAAG/E,WAAW,CAAC4B,GAAZ,EAAvB;AACA,QAAMyD,MAAM,GAAGJ,SAAS,CAACF,cAAD,EAAgB/E,WAAhB,CAAxB;AACA,QAAMsF,cAAc,GAAGF,SAAS,CAACC,MAAM,CAAC,CAAD,CAAP,EAAW1B,SAAX,EAAqBA,SAAS,GAAG0B,MAAM,CAAC,CAAD,CAAN,CAAUjF,MAA3C,CAAhC;AACA,QAAMmF,eAAe,GAAEH,SAAS,CAACC,MAAM,CAAC,CAAD,CAAP,EAAW1B,SAAS,GAAG0B,MAAM,CAAC,CAAD,CAAN,CAAUjF,MAAjC,EAAwCwD,UAAxC,CAAhC;AACA5D,IAAAA,WAAW,GAAG6E,WAAW,CAACS,cAAD,EAAgBP,cAAhB,EAA+BQ,eAA/B,CAAzB;AACH;;AAED/B,EAAAA,WAAW,CAACoB,aAAD,EAAe5E,WAAf,EAA2B2D,SAA3B,EAAqCC,UAArC,CAAX;AACAe,EAAAA,cAAc,CAACtE,IAAf,oBAAwBuE,aAAxB;AACA,SAAO5E,WAAP;AACH;;AAED,SAASwF,gBAAT,CAA0BxF,WAA1B,EAAsC;AAClC4E,EAAAA,aAAa,GAAG5E,WAAhB;AACAoF,EAAAA,SAAS,CAACpF,WAAD,EAAa,CAAb,EAAeA,WAAW,CAACI,MAA3B,CAAT;AACA,SAAOuE,cAAP;AACH","file":"components.2beec63a.js","sourceRoot":"..","sourcesContent":["{/* <script crossorigin src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script> */}\r\n{/* <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script> */}\r\n{/* <script crossorigin src=\"https://cdn.jsdelivr.net/npm/animejs@3.2.0/lib/anime.min.js\"></script> */}\r\n\r\nfunction checkCDNexist(){\r\n    try {\r\n        anime = anime\r\n        React = React\r\n        ReactDOM = ReactDOM\r\n        console.log(\"All CDNs imported\")\r\n    } catch (error) {\r\n        alert(\"One or more CDNs could not be imported, issues with page may occur\")\r\n    }\r\n}\r\n\r\nexport default checkCDNexist","const sortingAlgoList = [\r\n    {\r\n        id:\"bubbleSort\",\r\n        name:\"Bubble Sort\",\r\n        timeComplexity:\"n\\^2\",\r\n        spaceComplexity:\"1\",\r\n        desc:\"The simplest sorting algorithim for one to understand, however performance wise, this algorithim is one of the worst. The algorithm works by continously swapping algorithims adjacent to each other until no more can be swapped, at which point the array is sorted.\"\r\n    },\r\n    {\r\n        id:\"insertionSort\",\r\n        name:\"Insertion Sort\",\r\n        timeComplexity:\"n\\^2\",\r\n        spaceComplexity:\"1\",\r\n        desc:\"Similar to how humans sort, insertion sort work by looking through the array, and inserting each element to its correct place in the indices before.\"\r\n    },\r\n    {\r\n        id:\"heapSort\",\r\n        name:\"Heap Sort\",\r\n        timeComplexity:\"n*log(n)\",\r\n        spaceComplexity:\"1\",\r\n        desc:\"The array is processed as a \\\"heap\\\" tree where the nodes/elements above is always greater than the nodes below. This allows for the algorithim to remove the top node and know that it is the largest element in the heap. This loop is processed until there is no more elements in the heap.\"\r\n    },\r\n    {\r\n        id:\"selectionSort\",\r\n        name:\"Selection Sort\",\r\n        timeComplexity:\"n\\^2\",\r\n        spaceComplexity:\"1\",\r\n        desc:\"Selection sort works by looking through the list of elements and constantly selecting the element with lowest value and appending it onto a new list. This is done n times where n is the length of the orignal element. The animation shown is the final output array where values are selected and placed.\"\r\n    },\r\n    {\r\n        id:\"countingSort\",\r\n        name:\"Counting Sort\",\r\n        timeComplexity:\"n+k\",\r\n        spaceComplexity:\"k\",\r\n        desc:\"Black Magic. Just kidding this is the best sorting algorithim but only works when the said values have distinct key values (like integers). This algorithim works by creating a second array of size k (the largest number in the original array) and counts how many times that each element occurs in the orignal array. This second array provides a map of exactly which element should be where, this allows for the algorithim to know exactly where to place each element in the final output array.\"\r\n    },\r\n    {\r\n        id:\"radixSort\",\r\n        name:\"Radix Sort\",\r\n        timeComplexity:\"nk\",\r\n        spaceComplexity:\"n+k\",\r\n        desc:\"This algorithim only works with integers. It sorts each element in the array by looping through each decimal place and sorting these chunks of numbers until the biggest magnitude of input numbers are processed. The input array shown above and passed into all other algorithims are raised by 2^(element) for processing to exaggerate the effects of radix sort.\"\r\n    },\r\n    {\r\n        id:\"mergeSort\",\r\n        name:\"Merge Sort\",\r\n        timeComplexity:\"n*log(n)\",\r\n        spaceComplexity:\"n\",\r\n        desc:\"Merge sort uses a \\\"divide and conquer\\\" technique where it recursively breaks the array down into smaller and smaller halves until each halve is an individual element. At which point the algorithim merges each haves by comparing its values until everything is merged.\"\r\n    },\r\n    {\r\n        id:\"quickSort\",\r\n        name:\"Quick Sort\",\r\n        timeComplexity:\"n*log(n)\",\r\n        spaceComplexity:\"log(n)\",\r\n        desc:\"Quick sort also uses a \\\"divide and conquer\\\" technique, however it instead takes a random number from the list and move all elements smaller than said number to one side, and all elements larger than side number to the other side. This is done recursively until blocks of elements moved only contains one element.\"\r\n    },\r\n]\r\n\r\n//for bubbleSort\r\nfunction swapWithNext(inputArray,indexLoc){\r\n    let firstItem = inputArray[indexLoc]\r\n    inputArray[indexLoc] = inputArray[indexLoc+1]\r\n    inputArray[indexLoc+1] = firstItem\r\n    return inputArray\r\n}\r\n\r\nfunction bubbleSort(randomArray) {\r\n    let returnArraySteps = []\r\n    do{\r\n        var finishPassing = true\r\n        for(var i = 0;i < randomArray.length;i++){\r\n            if(randomArray[i] > randomArray[i+1]){\r\n                randomArray = [...swapWithNext(randomArray,i)]\r\n                returnArraySteps.push(randomArray)\r\n                finishPassing = false\r\n            }\r\n        }\r\n    }while(finishPassing == false)\r\n\r\n    return returnArraySteps\r\n}\r\n\r\nfunction countingSort(randomArray){\r\n    let returnArraySteps = []\r\n    //get the max value\r\n    const max = Math.max.apply(null,randomArray)\r\n    var countArray = new Array(max+1).fill(0)\r\n\r\n    //fill out counts\r\n    for(var i = 0;i<randomArray.length;i++){\r\n        countArray[randomArray[i]] = countArray[randomArray[i]] + 1\r\n    }\r\n\r\n    //create cumulative counts\r\n    for(var i = 0;i<max;i++){\r\n        countArray[i+1] = countArray[i+1] + countArray[i]\r\n    }\r\n\r\n    var sortedArray = Array(randomArray.length).fill(0)\r\n    //place in sorted array and decrement\r\n    for(var i = randomArray.length - 1;i > -1;i--){\r\n        var value = randomArray[i]\r\n        sortedArray[countArray[value]-1] = value\r\n        countArray[value] = countArray[value] -1\r\n        returnArraySteps.push([...sortedArray])\r\n    }\r\n\r\n    return returnArraySteps\r\n}\r\n\r\n//for heapSort\r\nconst returnChildren = (node) => {return [node*2+1,node*2+2]}\r\n\r\nfunction swapPositon(inputArray,pos1,pos2){\r\n    const tempVariable = inputArray[pos1]\r\n    inputArray[pos1] = inputArray[pos2]\r\n    inputArray[pos2] = tempVariable\r\n    return inputArray\r\n}\r\n\r\nfunction heapify(randomArray,node){\r\n    const nodeChildren = returnChildren(node)\r\n    do{\r\n        var lastLoop = true\r\n        //if the node is smaller than the children nodes, swap\r\n        if(randomArray[node]<randomArray[nodeChildren[1]]){\r\n            //try the right child\r\n            randomArray = swapPositon(randomArray,node,nodeChildren[1])\r\n            lastLoop = false\r\n        }\r\n\r\n        if(randomArray[node]<randomArray[nodeChildren[0]]){\r\n            //try the left child\r\n            randomArray = swapPositon(randomArray,node,nodeChildren[0])\r\n            lastLoop = false\r\n        }\r\n\r\n        //call heapify on the childs\r\n        if(randomArray[nodeChildren[0]]!=undefined){\r\n            randomArray = heapify(randomArray,nodeChildren[0])\r\n        }\r\n        if(randomArray[nodeChildren[1]]!=undefined){\r\n            randomArray = heapify(randomArray,nodeChildren[1])\r\n        }\r\n    }while(lastLoop==false)\r\n    return randomArray\r\n}\r\n\r\nfunction heapSort(randomArray){\r\n    var sortedArray = []\r\n    var returnArray = []\r\n    while(randomArray!=undefined&&randomArray.length!=0){\r\n        randomArray = heapify(randomArray,0)\r\n\r\n        //heap is built, now swap the first and last element\r\n        randomArray = swapPositon(randomArray,0,randomArray.length-1)\r\n        //remove the last element as it is the max\r\n        var lastElement = randomArray.pop()\r\n        sortedArray.push(lastElement)\r\n        returnArray.push([...randomArray.concat(sortedArray).reverse()])\r\n    }\r\n    //reverse the array\r\n    return returnArray\r\n}\r\n\r\n//for insertionSort\r\nfunction insert(inputArray,number){\r\n    //everything to the left should be sorted\r\n    for (var i = 0; i < inputArray.length;i++){\r\n        if(number <= inputArray[i]){\r\n            inputArray.splice(i,0,number)\r\n            return inputArray\r\n        }\r\n    }\r\n}\r\n\r\nfunction insertionSort(randomArray) {\r\n    let returnArraySteps = []\r\n    for(var i = 1;i < randomArray.length;i++){\r\n        if(randomArray[i-1] > randomArray[i]){\r\n            var insertionValue = randomArray.splice(i,1)[0]\r\n            randomArray = [...insert(randomArray,insertionValue)]\r\n            returnArraySteps.push(randomArray)\r\n        }\r\n    }\r\n    return returnArraySteps\r\n}\r\n\r\n//for radixSort\r\nconst radixMagnitudeValue = (value,magnitude)=>{\r\n    let strValue = \"\"+value\r\n    let magValue = parseInt(strValue[strValue.length - magnitude - 1])\r\n    if(isNaN(magValue)){\r\n        return 0\r\n    }else{\r\n        return magValue\r\n    }\r\n}\r\n\r\nfunction radixSort(randomArray){\r\n    let returnArraySteps = []\r\n    randomArray = randomArray.map(element => 2**element)\r\n    for(var magnitude = 0;10**magnitude <= Math.max.apply(null,randomArray);magnitude++){\r\n        let sortedArray = Array(10).fill([])\r\n        for(var index=0;index<randomArray.length;index++){\r\n            let value = randomArray[index]\r\n            let magVal = radixMagnitudeValue(value,magnitude)\r\n            sortedArray[magVal] = sortedArray[magVal].concat([value])\r\n        }\r\n        randomArray = sortedArray.flat()\r\n        returnArraySteps.push([...randomArray.map(element => Math.log2(element))])\r\n    }\r\n    return returnArraySteps\r\n}\r\n\r\n//for selectionSort\r\nfunction indexLoc(nums){\r\n    for (var i = 0; i < nums.length;i++){\r\n        if(nums[i]==Math.min.apply(null,nums)){\r\n            return i\r\n        }\r\n    }\r\n}\r\n\r\nfunction selectionSort(randomArray) {\r\n    var returnArraySteps = []\r\n    var sortedArray = []\r\n    while(randomArray.length > 0){ //While the original array is not empty\r\n        //Get the min/max value\r\n        let value = Math.min.apply(null,randomArray)\r\n\r\n        //Remove the value from original array\r\n        randomArray.splice(indexLoc(randomArray),1);\r\n\r\n        //Add the value to the list\r\n        sortedArray.push(value)\r\n        returnArraySteps.push(sortedArray.concat(Array(randomArray.length).fill(0)))\r\n\r\n    }\r\n\r\n    return returnArraySteps\r\n}\r\n\r\n//for mergeSort and quickSort\r\nfunction range(from,to) {\r\n    return [...Array(to-from).keys()].map(i => i + from);\r\n}\r\n\r\nfunction copytoSteps(inMemoryArray,newArray,leftBound,rightBound){\r\n    let indexRange = range(leftBound,rightBound)\r\n    for(var i = 0;i<indexRange.length;i++){\r\n        inMemoryArray[indexRange[i]] = newArray[i]\r\n    }\r\n}\r\n\r\n//TODO: find a better way to visualize mergeSort and quickSort\r\n//for mergeSort\r\nvar mergeSortSteps = []\r\nvar arrayMemoryMS = []\r\n\r\nfunction mergeSortMerge(firstHalf,secondHalf){\r\n    var mergedArray = []\r\n\r\n    // while there is still numbers to merge\r\n    do{\r\n        //check to see if either array is empty, if so, then we know the remaining values are just the other array\r\n        if(firstHalf === undefined || firstHalf.length == 0){\r\n            mergedArray = mergedArray.concat(secondHalf)\r\n            break\r\n        }else if(secondHalf === undefined || secondHalf.length == 0){\r\n            mergedArray = mergedArray.concat(firstHalf)\r\n            break\r\n        }\r\n\r\n        //Check to see which array starts with a smaller value and append it into the new array\r\n        if(firstHalf[0]<secondHalf[0]){\r\n            let appendValue = firstHalf.shift()\r\n            mergedArray.push(appendValue)\r\n        }else{\r\n            let appendValue = secondHalf.shift()\r\n            mergedArray.push(appendValue)\r\n        }\r\n\r\n    }while(firstHalf.length + secondHalf.length > 0)\r\n\r\n    return mergedArray\r\n}\r\n\r\nfunction mergeSort(randomArray,leftBound,rightBound) {\r\n    if (randomArray.length > 1){//keep splitting until size 1\r\n        let midpoint = Math.ceil([...randomArray].length/2) //Get the midpoint, if uneven, get the rounded up midpoint\r\n        //if not sorted\r\n        const firstHalf = mergeSort(randomArray.slice(0,midpoint),leftBound,midpoint+leftBound)\r\n        const secondHalf = mergeSort(randomArray.slice(midpoint,randomArray.length),midpoint+leftBound,rightBound)\r\n        randomArray = mergeSortMerge(firstHalf,secondHalf)\r\n    }\r\n\r\n    copytoSteps(arrayMemoryMS,randomArray,leftBound,rightBound)\r\n    mergeSortSteps.push([...arrayMemoryMS])\r\n    return randomArray\r\n}\r\n\r\nfunction mergeSortHandler(randomArray){\r\n    arrayMemoryMS = randomArray\r\n    mergeSort(randomArray,0,randomArray.length)\r\n    return mergeSortSteps\r\n}\r\n\r\n//for quickSort\r\nvar quickSortSteps = []\r\nvar arrayMemoryQS = []\r\nfunction mergeArrays(leftArray,partitionValue,rightArray){\r\n    if(rightArray==undefined && leftArray==undefined){\r\n        var sortedArray = [partitionValue]\r\n    }else if(rightArray==undefined){\r\n        var sortedArray = leftArray.concat([partitionValue])\r\n    }else if(leftArray==undefined){\r\n        var sortedArray = [partitionValue].concat(rightArray)\r\n    }else{\r\n        var sortedArray = leftArray.concat([partitionValue].concat(rightArray))\r\n    }\r\n\r\n    return sortedArray\r\n}\r\n\r\nfunction getHalves(partitionValue,randomArray){\r\n    let leftHalf = []\r\n    let rightHalf = []\r\n\r\n    //place into new arrays\r\n    for(var i = 0;i<randomArray.length;i++){\r\n        let value = randomArray[i]\r\n        if(value<partitionValue){leftHalf.push(value)}\r\n        else{rightHalf.push(value)}\r\n    }\r\n\r\n    return [leftHalf,rightHalf]\r\n}\r\n\r\nfunction quickSort(randomArray,leftBound,rightBound) {\r\n    if(randomArray!=undefined&&randomArray.length > 1){\r\n        const partitionValue = randomArray.pop()\r\n        const halves = getHalves(partitionValue,randomArray)\r\n        const leftHalfSorted = quickSort(halves[0],leftBound,leftBound + halves[0].length)\r\n        const rightHalfSorted= quickSort(halves[1],leftBound + halves[0].length,rightBound)\r\n        randomArray = mergeArrays(leftHalfSorted,partitionValue,rightHalfSorted)\r\n    }\r\n\r\n    copytoSteps(arrayMemoryQS,randomArray,leftBound,rightBound)\r\n    quickSortSteps.push([...arrayMemoryQS])\r\n    return randomArray\r\n}\r\n\r\nfunction quickSortHandler(randomArray){\r\n    arrayMemoryQS = randomArray\r\n    quickSort(randomArray,0,randomArray.length)\r\n    return quickSortSteps\r\n}\r\n\r\nexport {sortingAlgoList,bubbleSort,countingSort,heapSort,insertionSort,radixSort,selectionSort,mergeSortHandler,quickSortHandler}","const refreshPeriod = 400\r\n\r\nclass Dot extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"dot\" style={{opacity:this.props.value/100}}></div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Dots extends React.Component{\r\n  constructor(props){super()\r\n    this.state={\r\n                  sortingSteps:props.inputArray,\r\n                  currentArray:props.inputArray[0],\r\n                  index:0\r\n                }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.setState(state => ({\r\n                                                              index: state.index < state.sortingSteps.length - 1? state.index + 1: 0,\r\n                                                              currentArray: state.sortingSteps[state.index]\r\n                                                            })), refreshPeriod)\r\n  }\r\n\r\n  render(){\r\n      let dots = this.state.currentArray.map((element,index) => <Dot value={this.state.currentArray[index]}/>)\r\n      return(\r\n      <div className=\"dotContainer\">\r\n          {dots}\r\n      </div>\r\n  )};\r\n}\r\n\r\nexport default Dots","var headerContent = {\r\n  title:\"Sorting Algorithims\",\r\n  description:\"Hello! This site is meant to be a quick reference guide to sorting algorithims. It provides a quick description and a pretty animation for each algorithim. The input array is randomly generated each time this site loads and is then processed via each algorithim. The time it takes for each animation to loop is not an indicator of how fast the algorithims are, as I am only displaying noteworthy events in the processsing of said random Array.\",\r\n  link:\"https://thomasshih.codes/\"\r\n}\r\n\r\nexport default headerContent","import {sortingAlgoList,bubbleSort,countingSort,heapSort,insertionSort,mergeSortHandler,quickSortHandler,radixSort,selectionSort} from \"../assets/sortingAlgoList\"\r\nimport Dots from \"./Dots\"\r\nimport headerContent from \"../assets/sortingAlgoHeader\"\r\n\r\nfunction processSort(randomArray,algoName){\r\n  if(algoName==\"Bubble Sort\"){\r\n    var arraySteps = bubbleSort([...randomArray])\r\n  }else if (algoName==\"Counting Sort\"){\r\n    var arraySteps = countingSort([...randomArray])\r\n  }else if (algoName==\"Heap Sort\"){\r\n    var arraySteps = heapSort([...randomArray])\r\n  }else if (algoName==\"Insertion Sort\"){\r\n    var arraySteps = insertionSort([...randomArray])\r\n  }else if (algoName==\"Merge Sort\"){\r\n    var arraySteps = mergeSortHandler([...randomArray])\r\n  }else if (algoName==\"Quick Sort\"){\r\n    var arraySteps = quickSortHandler([...randomArray])\r\n  }else if (algoName==\"Radix Sort\"){\r\n    var arraySteps = radixSort([...randomArray])\r\n  }else if (algoName==\"Selection Sort\"){\r\n    var arraySteps = selectionSort([...randomArray])\r\n  }else {var arraySteps = bubbleSort([...randomArray])}\r\n\r\n  return arraySteps\r\n}\r\n\r\nclass Algorithim extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"algorithim\">\r\n          <h1 className=\"algoName\">{this.props.name}</h1>\r\n          <h2 className=\"timeComplexity\" >Time: {this.props.timeComplexity}</h2>\r\n          <h2 className=\"spaceComplexity\">Space: {this.props.spaceComplexity}</h2>\r\n          <h1 className=\"desc\">{this.props.desc}</h1>\r\n          <Dots className=\"algorithimAnimation\" inputArray={processSort(this.props.inputArray,this.props.name)}/>\r\n      </div>\r\n  )};\r\n}\r\n\r\nclass Header extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"sortingAlgorithimHeader\">\r\n        <h1>\r\n          {headerContent.title}\r\n        </h1>\r\n        <h2>\r\n          {headerContent.description}\r\n        </h2>\r\n        <h3>For a link to all my other work and GitHub, please visit me at <a href={headerContent.link}>thomasshih.codes</a></h3>\r\n        <Dots inputArray={[this.props.inputArray]}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SortingAlgorithims extends React.Component{\r\n  constructor(){super()\r\n    //Generate a list of unique numbers\r\n    this.inputArray = [];\r\n    while(this.inputArray.length < 40){\r\n        var r = Math.floor(Math.random() * 100) + 1;\r\n        if(this.inputArray.indexOf(r) === -1) this.inputArray.push(r);\r\n    }\r\n\r\n    this.algorithimList = sortingAlgoList.map(algo => <Algorithim id={algo.id}\r\n                                                                  name={algo.name}\r\n                                                                  timeComplexity={algo.timeComplexity}\r\n                                                                  spaceComplexity={algo.spaceComplexity}\r\n                                                                  desc={algo.desc}\r\n                                                                  inputArray={this.inputArray}\r\n                                                                  directory={\"../SortingAlgorithims\"}/>)\r\n  }\r\n\r\n  render(){return(\r\n      <div className=\"sortingAlgoPage\">\r\n        <Header inputArray={this.inputArray} />\r\n        {this.algorithimList}\r\n      </div>\r\n  )}\r\n}\r\n\r\nexport default SortingAlgorithims","import checkCDNexist from \"../utilities/checkCDN\"\r\nimport SortingAlgorithims from \"../components/SortingAlgorithims\"\r\n\r\ncheckCDNexist();\r\nReactDOM.render(<SortingAlgorithims/>,document.getElementById(\"body\"))"]}